<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.fewe.akquisedaten</groupId>
	<artifactId>fu-bar</artifactId>
	<version>1.0.0-SNAPSHOT</version>
    <packaging>war</packaging>
	<name>FuBar</name>
	<description>Description for FuBar</description>

	<repositories>
		<!-- jhipster-needle-maven-repository -->
	</repositories>

	<pluginRepositories>
		<!-- jhipster-needle-maven-plugin-repository -->
	</pluginRepositories>

	<!-- jhipster-needle-distribution-management -->

	<properties>
		<!-- Build properties -->
		<maven.version>3.6.0</maven.version>
		<java.version>11</java.version>
		<node.version>v16.20.0</node.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<start-class>de.svi.svis5g.akquisedaten.SvisAkquiseDatenApp</start-class>
		<argLine>-Djava.security.egd=file:/dev/./urandom -Xmx2G</argLine>
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>
		<run.addResources>false</run.addResources>
		<!-- These remain empty unless the corresponding profile is active -->
		<profile.no-liquibase />
		<profile.api-docs />

		<!-- Dependency versions -->
		<jhipster-dependencies.version>7.9.3</jhipster-dependencies.version>
		<!-- The spring-boot version should match the one managed by https://mvnrepository.com/artifact/tech.jhipster/jhipster-dependencies/${jhipster-dependencies.version} -->
		<spring-boot.version>2.7.6</spring-boot.version>
		<spring-security.version>5.7.5</spring-security.version>
		<!-- The hibernate version should match the one managed by https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
		<hibernate.version>5.6.15.Final</hibernate.version>
		<!-- The liquibase version should match the one managed by https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/${spring-boot.version} -->
		<liquibase.version>4.19.0</liquibase.version>
		<liquibase-hibernate5.version>4.19.0</liquibase-hibernate5.version>
		<validation-api.version>2.0.1.Final</validation-api.version>
		<jaxb-runtime.version>4.0.0</jaxb-runtime.version>
		<archunit-junit5.version>0.22.0</archunit-junit5.version>
		<mapstruct.version>1.5.2.Final</mapstruct.version>
		
		<!-- Plugin versions -->
		<maven-clean-plugin.version>3.2.0</maven-clean-plugin.version>
		<maven-site-plugin.version>3.12.1</maven-site-plugin.version>
		<maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
		<maven-javadoc-plugin.version>3.4.1</maven-javadoc-plugin.version>
		<maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
		<maven-enforcer-plugin.version>3.1.0</maven-enforcer-plugin.version>
		<maven-failsafe-plugin.version>3.0.0-M7</maven-failsafe-plugin.version>
		<maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
		<maven-idea-plugin.version>2.2.1</maven-idea-plugin.version>
		<maven-resources-plugin.version>3.3.0</maven-resources-plugin.version>
		<maven-surefire-plugin.version>3.0.0-M7</maven-surefire-plugin.version>
		<maven-war-plugin.version>3.3.2</maven-war-plugin.version>
		<maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
		<checkstyle.version>10.3.2</checkstyle.version>
		<nohttp-checkstyle.version>0.0.10</nohttp-checkstyle.version>
		<frontend-maven-plugin.version>1.12.1</frontend-maven-plugin.version>
		<checksum-maven-plugin.version>1.11</checksum-maven-plugin.version>
		<maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>
		<git-commit-id-plugin.version>5.0.0</git-commit-id-plugin.version>
		<modernizer-maven-plugin.version>2.4.0</modernizer-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.8</jacoco-maven-plugin.version>
		<jib-maven-plugin.version>3.3.1</jib-maven-plugin.version>
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>

		<!-- jhipster-needle-maven-property -->
		<!-- for jib configuration -->
		<sendCredentialsOverHttp>true</sendCredentialsOverHttp>
		<jib-maven-plugin.allowInsecureRegistries>true</jib-maven-plugin.allowInsecureRegistries>
		<nexus.registry.url>${env.NEXUS.REGISTRY.HOST}</nexus.registry.url>
		<!--base.docker.image>tar://${basedir}/lib/openjdk-11.0.11_9-jre-hotspot.tar</base.docker.image -->
		<base.docker.image>${nexus.registry.url}/eclipse-temurin:11.0.17_8-jre</base.docker.image>
		<nexus.registry.username>${env.NEXUS.REGISTRY.USERNAME}</nexus.registry.username>
		<nexus.registry.password>${env.NEXUS.REGISTRY.PASSWORD}</nexus.registry.password>
		<!-- Quelle: https://nodejs.org/dist/ , https://registry.npmjs.org/npm/-/npm-x.xx.xx.tgz -->
		<!-- node.npm.downloadRoot>https://nexus.pr.sv.loc/repository/raw-group/nodejs/</node.npm.downloadRoot --> <!-- aus Parent-pom -->
		<!-- node.npm.downloadRoot>https://nodejs.org/dist/</node.npm.downloadRoot -->
		<maven.settings.serverId>central-proxy</maven.settings.serverId>

		<!-- nexus-iq-scan Konfiguration -->
		<!-- https://help.sonatype.com/integrations/nexus-iq-cli -->
		<!-- zusätzliche Konfiguration in: nexus-iq-scan.properties -->
		<!-- Argument: stage, Given: "'stage", Choices: "develop", "build", "stage-release", "release" -->
		<nexus.iq.scan.stage>build</nexus.iq.scan.stage>
		<nexus.iq.scan.scanPatternJarWar>target/${project.artifactId}-${project.version}.jar</nexus.iq.scan.scanPatternJarWar>

		<!-- yaml deployment for openshift -->
		<!-- im release jenkins build sollte dann ${basedir}/src/main/openshift/prod verwendet werden: -Dde.svi.devops.utils.OpenShiftDeploymentBuilder.sourceDir=src/main/openshift/prod -->
		<de.svi.devops.utils.OpenShiftDeploymentBuilder.sourceDir>${basedir}/src/main/openshift/dev</de.svi.devops.utils.OpenShiftDeploymentBuilder.sourceDir>
		<!-- templates werden automatisch runtergeladen. Wenn gewünscht können eigene Templates für yaml-Deployment entwickelt und verwendet werden -->
		<!--de.svi.devops.utils.OpenShiftDeploymentBuilder.templateDir>${project.build.directory}/templates/openshift</de.svi.devops.utils.OpenShiftDeploymentBuilder.templateDir -->
		<de.svi.devops.utils.OpenShiftDeploymentBuilder.targetDir>${project.build.directory}/openshift</de.svi.devops.utils.OpenShiftDeploymentBuilder.targetDir>

		<yaml.upload.nexus.uploadToNexus>false</yaml.upload.nexus.uploadToNexus>

		<yaml-oc-apply.executableScript>svis-akquise-daten-applyAllScripts.sh</yaml-oc-apply.executableScript>
		<yaml-oc-apply.yamlPathEW>${de.svi.devops.utils.OpenShiftDeploymentBuilder.targetDir}/svi-ew/svis-akquise-daten</yaml-oc-apply.yamlPathEW>
		
		<nexus-iq-cli.version>1.153.0-01</nexus-iq-cli.version>

	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>tech.jhipster</groupId>
				<artifactId>jhipster-dependencies</artifactId>
				<version>${jhipster-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- jhipster-needle-maven-add-dependency-management -->
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>tech.jhipster</groupId>
			<artifactId>jhipster-framework</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate5</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hppc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-webmvc-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jcache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<!-- Inherited version from Spring Boot can't be used because of regressions -->
			<version>${liquibase.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-loader-tools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>jdbc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-api</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Adding the engine dependency to the surefire-plugin unfortunately does not work in the current version. -->
		<!-- https://www.archunit.org/userguide/html/000_Index.html#_junit_5 -->
		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5-engine</artifactId>
			<version>${archunit-junit5.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.zalando</groupId>
			<artifactId>problem-spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		<!-- Spring Cloud -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-data</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.13.4.1</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.13.4</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-websocket</artifactId>
			<version>9.0.71</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-core</artifactId>
			<version>9.0.71</version>
		</dependency>
		
		<dependency>
			<groupId>de.svi.devops</groupId>
			<artifactId>properties-to-resources</artifactId>
			<version>2.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
			<version>1.33</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>1.10.0</version>
		</dependency>

		<!-- WS -->
		<dependency>
			<groupId>com.sun.xml.ws</groupId>
			<artifactId>jaxws-rt</artifactId>
			<version>2.3.5</version>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.woodstox</groupId>
					<artifactId>woodstox-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.woodstox</groupId>
			<artifactId>woodstox-core</artifactId>
			<version>6.4.0</version>
		</dependency>

		<!-- SVI -->
		<dependency>
			<groupId>de.svi.svis3g</groupId>
			<artifactId>SVIS3GWebserviceClientGen</artifactId>
			<version>6.0.9</version>
		</dependency>

		<dependency>
			<groupId>de.svi.framework</groupId>
			<artifactId>SVICommons</artifactId>
			<version>5.3.16</version>
			<exclusions>
				<exclusion>
					<groupId>com.thoughtworks.xstream</groupId>
					<artifactId>xstream</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc8</artifactId>
			<version>21.6.0.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>1.17.2</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>spring-boot:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-checkstyle-plugin</artifactId> </plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-idea-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.gaul</groupId>
				<artifactId>modernizer-maven-plugin</artifactId>
			</plugin>
			<!-- jhipster-needle-maven-add-plugin -->
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${maven-checkstyle-plugin.version}</version>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>${checkstyle.version}</version>
						</dependency>
						<dependency>
							<groupId>io.spring.nohttp</groupId>
							<artifactId>nohttp-checkstyle</artifactId>
							<version>${nohttp-checkstyle.version}</version>
						</dependency>
					</dependencies>
					<configuration>
						<configLocation>checkstyle.xml</configLocation>
						<includes>pom.xml,README.md</includes>
						<excludes>.git/**/*,target/**/*,node_modules/**/*,node/**/*</excludes>
						<sourceDirectories>./</sourceDirectories>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<annotationProcessorPaths>
							<path>
								<groupId>org.springframework.boot</groupId>
								<artifactId>spring-boot-configuration-processor</artifactId>
								<version>${spring-boot.version}</version>
							</path>
							<path>
								<groupId>org.mapstruct</groupId>
								<artifactId>mapstruct-processor</artifactId>
								<version>${mapstruct.version}</version>
							</path>
							<!-- For JPA static metamodel generation -->
							<path>
								<groupId>org.hibernate</groupId>
								<artifactId>hibernate-jpamodelgen</artifactId>
								<version>${hibernate.version}</version>
							</path>
							<path>
								<groupId>org.glassfish.jaxb</groupId>
								<artifactId>jaxb-runtime</artifactId>
								<version>${jaxb-runtime.version}</version>
							</path>
							<!-- jhipster-needle-maven-add-annotation-processor -->
						</annotationProcessorPaths>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<source>${maven.compiler.source}</source>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
					<executions>
						<execution>
							<id>default-war</id>
							<goals>
								<goal>war</goal>
							</goals>
							<phase>package</phase>
						</execution>
					</executions>
					<configuration>
						<warSourceIncludes>WEB-INF/**,META-INF/**</warSourceIncludes>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<warSourceDirectory>target/classes/static/</warSourceDirectory>
						<webResources>
							<resource>
								<directory>src/main/webapp</directory>
								<includes>
									<include>WEB-INF/**</include>
								</includes>
							</resource>
						</webResources>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>${frontend-maven-plugin.version}</version>
					<configuration>
						<installDirectory>target</installDirectory>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<executions>
						<execution>
							<phase>initialize</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
							<configuration>
								<files>
									<file>sonar-project.properties</file>
								</files>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>io.github.git-commit-id</groupId>
					<artifactId>git-commit-id-maven-plugin</artifactId>
					<version>${git-commit-id-plugin.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<failOnNoGitDirectory>false</failOnNoGitDirectory>
						<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
						<generateGitPropertiesFile>true</generateGitPropertiesFile>
						<includeOnlyProperties>
							<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
							<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
							<includeOnlyProperty>^git.branch$</includeOnlyProperty>
						</includeOnlyProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.gaul</groupId>
					<artifactId>modernizer-maven-plugin</artifactId>
					<version>${modernizer-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>modernizer</id>
							<phase>package</phase>
							<goals>
								<goal>modernizer</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<javaVersion>${java.version}</javaVersion>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-tests</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
						<execution>
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>pre-integration-tests</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
						<execution>
							<id>post-integration-tests</id>
							<phase>post-integration-test</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${maven-clean-plugin.version}</version>
				</plugin>
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>${maven-site-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${maven-eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<downloadJavadocs>true</downloadJavadocs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${maven-enforcer-plugin.version}</version>
					<executions>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
						<execution>
							<id>enforce-dependencyConvergence</id>
							<configuration>
								<rules>
									<DependencyConvergence />
								</rules>
								<fail>false</fail>
							</configuration>
							<goals>
								<goal>enforce</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<rules>
							<requireMavenVersion>
								<message>You are running an older version of Maven. JHipster requires at least Maven ${maven.version}</message>
								<version>[${maven.version},)</version>
							</requireMavenVersion>
							<requireJavaVersion>
								<message>You are running an incompatible version of Java. JHipster supports JDK 11 to 18.</message>
								<version>[11,12),[12,13),[13,14),[14,15),[15,16),[16,17),[17,18),[18,19)</version>
							</requireJavaVersion>
						</rules>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-idea-plugin</artifactId>
					<version>${maven-idea-plugin.version}</version>
					<configuration>
						<exclude>node_modules</exclude>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin.version}</version>
					<executions>
						<execution>
							<id>default-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/classes</outputDirectory>
								<useDefaultDelimiters>false</useDefaultDelimiters>
								<delimiters>
									<delimiter>#</delimiter>
								</delimiters>
								<resources>
									<resource>
										<directory>src/main/resources/</directory>
										<filtering>true</filtering>
										<includes>
											<include>config/*.yml</include>
										</includes>
									</resource>
									<resource>
										<directory>src/main/resources/</directory>
										<filtering>false</filtering>
										<excludes>
											<exclude>config/*.yml</exclude>
										</excludes>
									</resource>
								</resources>
							</configuration>
						</execution>
						<execution>
							<id>copy startSpringBootApp.cmd to ${project.build.directory}</id>
							<phase>package</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}</outputDirectory>
								<resources>
									<resource>
										<filtering>true</filtering>
										<directory>src/test/resources</directory>
										<includes>
											<include>startCmdHere.cmd</include>
											<include>startSpringBootApp.cmd</include>
										</includes>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<excludes>
							<exclude>**/*IT*</exclude>
							<exclude>**/*IntTest*</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>${maven-jar-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-maven-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring-boot.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<mainClass>${start-class}</mainClass>
						<fork>true</fork>
						<!-- Enable the line below to have remote debugging of your application on port 5005 <jvmArguments>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</jvmArguments> -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${maven-failsafe-plugin.version}</version>
					<configuration>
						<!-- Due to spring-boot repackage, without adding this property test classes are not found See https://github.com/spring-projects/spring-boot/issues/6254 -->
						<classesDirectory>${project.build.outputDirectory}</classesDirectory>
						<!-- Force alphabetical order to have a reproducible build -->
						<runOrder>alphabetical</runOrder>
						<includes>
							<include>**/*IT*</include>
							<include>**/*IntTest*</include>
						</includes>
						<argLine>@{argLine} -Dspring.profiles.active=testdev</argLine>
					</configuration>
					<executions>
						<execution>
							<id>integration-test</id>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify</id>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.liquibase</groupId>
					<artifactId>liquibase-maven-plugin</artifactId>
					<version>${liquibase.version}</version>
					<configuration>
						<changeLogFile>${project.basedir}/src/main/resources/config/liquibase/master.xml</changeLogFile>
						<diffChangeLogFile>${project.basedir}/src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
						<driver></driver>
						<url></url>
						<defaultSchemaName></defaultSchemaName>
						<username>SVISAkquiseDaten</username>
						<password></password>
						<referenceUrl>hibernate:spring:de.svi.svis5g.akquisedaten.domain?dialect=org.hibernate.dialect.H2Dialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
						<verbose>true</verbose>
						<logging>debug</logging>
						<contexts>!test</contexts>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.liquibase</groupId>
							<artifactId>liquibase-core</artifactId>
							<version>${liquibase.version}</version>
						</dependency>
						<dependency>
							<groupId>org.liquibase.ext</groupId>
							<artifactId>liquibase-hibernate5</artifactId>
							<version>${liquibase-hibernate5.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework.boot</groupId>
							<artifactId>spring-boot-starter-data-jpa</artifactId>
							<version>${spring-boot.version}</version>
						</dependency>
						<dependency>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>${validation-api.version}</version>
						</dependency>
						<dependency>
							<groupId>com.h2database</groupId>
							<artifactId>h2</artifactId>
						</dependency>
					</dependencies>
				</plugin>
				<!-- jhipster-needle-maven-add-plugin-management -->
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>no-liquibase</id>
			<properties>
				<profile.no-liquibase>,no-liquibase</profile.no-liquibase>
			</properties>
		</profile>
		<profile>
			<id>api-docs</id>
			<properties>
				<profile.api-docs>,api-docs</profile.api-docs>
			</properties>
		</profile>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-devtools</artifactId>
					<optional>true</optional>
				</dependency>
				<dependency>
					<groupId>com.h2database</groupId>
					<artifactId>h2</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>net.nicoulaj.maven.plugins</groupId>
						<artifactId>checksum-maven-plugin</artifactId>
						<version>${checksum-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>create-pre-compiled-webapp-checksum</id>
								<goals>
									<goal>files</goal>
								</goals>
								<phase>generate-resources</phase>
							</execution>
							<execution>
								<id>create-compiled-webapp-checksum</id>
								<goals>
									<goal>files</goal>
								</goals>
								<phase>compile</phase>
								<configuration>
									<csvSummaryFile>checksums.csv.old</csvSummaryFile>
								</configuration>
							</execution>
						</executions>
						<configuration>
							<fileSets>
								<fileSet>
									<directory>${project.basedir}</directory>
									<includes>
										<include>src/main/webapp/**/*.*</include>
										<include>target/classes/static/**/*.*</include>
										<include>package-lock.json</include>
										<include>package.json</include>
										<include>webpack/*.*</include>
										<include>tsconfig.json</include>
										<include>.postcssrc.js</include>
									</includes>
									<excludes>
										<exclude>**/app/**/service-worker.js</exclude>
										<exclude>**/app/**/vendor.css</exclude>
									</excludes>
								</fileSet>
							</fileSets>
							<failOnError>false</failOnError>
							<failIfNoFiles>false</failIfNoFiles>
							<individualFiles>false</individualFiles>
							<algorithms>
								<algorithm>SHA-1</algorithm>
							</algorithms>
							<includeRelativePath>true</includeRelativePath>
							<quiet>true</quiet>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${maven-antrun-plugin.version}</version>
						<executions>
							<execution>
								<id>eval-frontend-checksum</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<condition property="skip.npm" value="true" else="false">
											<and>
												<available file="checksums.csv" filepath="${project.build.directory}" />
												<available file="checksums.csv.old" filepath="${project.build.directory}" />
												<filesmatch file1="${project.build.directory}/checksums.csv" file2="${project.build.directory}/checksums.csv.old" />
											</and>
										</condition>
									</target>
									<exportAntProperties>true</exportAntProperties>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>install-node-and-npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>${node.version}</nodeVersion>
								</configuration>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
							</execution>
							<execution>
								<id>webapp build dev</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>generate-resources</phase>
								<configuration>
									<arguments>run webapp:build</arguments>
									<environmentVariables>
										<APP_VERSION>${project.version}-${BUILD_NUMBER}</APP_VERSION>
										<SERVER_SERVLET_CONTEXT_PATH>/${project.artifactId}</SERVER_SERVLET_CONTEXT_PATH>
									</environmentVariables>
									<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>dev${profile.no-liquibase}</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/classes/static/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>install-node-and-npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>${node.version}</nodeVersion>
								</configuration>
							</execution>
							<execution>
								<id>npm install</id>
								<goals>
									<goal>npm</goal>
								</goals>
							</execution>
							<execution>
								<id>webapp build prod</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>generate-resources</phase>
								<configuration>
									<arguments>run webapp:prod</arguments>
									<environmentVariables>
										<APP_VERSION>${project.version}-${BUILD_NUMBER}</APP_VERSION>
										<SERVER_SERVLET_CONTEXT_PATH>/${project.artifactId}</SERVER_SERVLET_CONTEXT_PATH>
									</environmentVariables>
									<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.github.git-commit-id</groupId>
						<artifactId>git-commit-id-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>prod${profile.api-docs}${profile.no-liquibase}</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>war</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- jhipster-needle-maven-add-profile -->
		<profile>
			<id>build-images</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.google.cloud.tools</groupId>
						<artifactId>jib-maven-plugin</artifactId>
						<version>${jib-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>build docker-image:${nexus.registry.url}/akquise-daten:${project.version}-${BUILD_NUMBER}</id>
								<phase>verify</phase>
								<goals>
									<goal>build</goal>
									<goal>buildTar</goal>
								</goals>
								<configuration>
									<allowInsecureRegistries>${jib-maven-plugin.allowInsecureRegistries}</allowInsecureRegistries>
									<serverId>${maven.settings.serverId}</serverId>
									<from>
										<image>${base.docker.image}</image>
										<auth>
											<username>${nexus.registry.username}</username>
											<password>${nexus.registry.password}</password>
										</auth>
									</from>
									<to>
										<image>${nexus.registry.url}/svis-akquise-daten:${project.version}-${BUILD_NUMBER}</image>
										<tags>
											<tag>${project.version}-${BUILD_NUMBER}</tag>
											<tag>latest</tag>
										</tags>
										<auth>
											<username>${nexus.registry.username}</username>
											<password>${nexus.registry.password}</password>
										</auth>
									</to>
									<container>
										<entrypoint>
                             				<shell>sh</shell>
											<option>-c</option>
											<!--arg>java ${JAVA_OPTS} -noverify -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom -jar ${project.artifactId}-${project.version}.war</arg-->
											<!-- so ist der Start ca. 20% schneller -->
											<arg>java ${JAVA_OPTS} -noverify -XX:+AlwaysPreTouch -Djava.security.egd=file:/dev/./urandom -cp /${project.artifactId}/WEB-INF/classes:/${project.artifactId}/WEB-INF/lib/* "de.svi.svis5g.akquisedaten.SvisAkquiseDatenApp"</arg>
										</entrypoint>
										<ports>
											<port>8080</port>
										</ports>
										<environment>
											<SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
											<SERVER_SERVLET_CONTEXT_PATH>/${project.artifactId}</SERVER_SERVLET_CONTEXT_PATH>
										</environment>
										<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
										<user>1000</user>
									</container>
									<extraDirectories>
									<paths>
										<!--path>
											<from>${basedir}/target</from>
											<includes>
												<include>${project.artifactId}-${project.version}.war</include>
											</includes>
											<into>/</into>
										</path-->
										<path> <!-- so ist der Start ca. 20% schneller -->
											<from>${basedir}/target/${project.artifactId}-${project.version}</from>
											<into>/${project.artifactId}</into>
										</path>
									</paths>
									</extraDirectories>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>nexus-iq-docker-image-scan</id> <!-- https://help.sonatype.com/integrations/nexus-iq-cli -->
			<properties>
				<!-- nexus-iq-scan Konfiguration -->
				<!-- https://help.sonatype.com/integrations/nexus-iq-cli -->
				<nexus.iq.scan.host>https://nxiq.pr.sv.loc</nexus.iq.scan.host>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy nexus-iq-cli.jar</id>
								<phase>install</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>com.sonatype</groupId>
											<artifactId>nexus-iq-cli</artifactId>
											<version>${nexus-iq-cli.version}</version>
											<type>jar</type>
											<outputDirectory>${project.build.directory}/nexus-iq-cli</outputDirectory>
											<destFileName>nexus-iq-cli.jar</destFileName>
										</artifactItem>
									</artifactItems>
									<overwrite>false</overwrite>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>executing nexus-iq-docker-image-scan</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<workingDirectory>${project.build.directory}</workingDirectory>
									<arguments>
										<argument>-jar</argument>  <!--Example: -jar ./nexus-iq-cli-1.59.0-01.jar -i dockerapp -s http://localhost:8070 -a admin:changeme -t build webgoat- 7.1.tar -->
										<argument>${project.build.directory}/nexus-iq-cli/nexus-iq-cli.jar</argument>
										<argument>-i</argument>
										<argument>${project.artifactId}-as-docker-image</argument>
										<argument>-s</argument>
										<argument>${nexus.iq.scan.host}</argument>
										<argument>-t</argument>
										<argument>${nexus.iq.scan.stage}</argument>
										<argument>-a</argument>
										<argument>${env.NEXUS.LIFECYCLE.APP.EVALUATOR.USERNAME}:${env.NEXUS.LIFECYCLE.APP.EVALUATOR.PASSWORD}</argument>
										<argument>-e</argument><!-- Using the switch -e, allows you to ignore 
											any system errors (e.g. IO, Network, server, etc.). This is most helpful 
											when using the Nexus IQ CLI with continuous integration servers, as these 
											errors can cause the unintentional failure of a build. -->
										<argument>-r</argument>
										<argument>${project.build.directory}/nexus-iq-docker-image-scan.log</argument>
										<argument>jib-image.tar</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>yaml-build</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>de.svi.maven.plugins</groupId>
						<artifactId>yaml-openshift-maven-plugin</artifactId>
						<version>2.1.1</version>
						<executions>
							<execution>
								<id>build yaml with yaml-openshift-maven-plugin</id>
								<goals>
									<goal>build</goal>
								</goals>
								<phase>verify</phase>
								<configuration>
									<sourceDir>${de.svi.devops.utils.OpenShiftDeploymentBuilder.sourceDir}</sourceDir>
									<!-- templates werden automatisch runtergeladen. Wenn gewünscht können eigene Templates für yaml-Konfiguration entwickelt und verwendet werden -->
									<!-- templateDir>${de.svi.devops.utils.OpenShiftDeploymentBuilder.templateDir}</templateDir -->
									<targetDir>${de.svi.devops.utils.OpenShiftDeploymentBuilder.targetDir}</targetDir>
									<uploadToNexus>${yaml.upload.nexus.uploadToNexus}</uploadToNexus>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>yaml-oc-apply</id> <!-- vorausgesetzt yaml-build wurde ausgeführt und oc.exe ist in PATH! -->
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>executing yaml to svi-ew-svis</id>
								<phase>install</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>de.svi.devops.utils.openshift.OcApplyFileExecutor</mainClass>
									<workingDirectory>${yaml-oc-apply.yamlPathEW}</workingDirectory>
									<arguments>
										<argument>${yaml-oc-apply.yamlPathEW}/${yaml-oc-apply.executableScript}</argument>
										<argument>${yaml-oc-apply.yamlPathEW}</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jenkins</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>jenkins</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources-plugin.version}</version>
						<executions>
							<execution>
								<id>copy nexus-iq-scan.properties to ${project.basedir}</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.basedir}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<filtering>true</filtering>
											<directory>src/test/resources</directory>
											<includes>
												<include>nexus-iq-scan.properties</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
